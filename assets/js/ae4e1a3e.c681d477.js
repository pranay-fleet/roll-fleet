"use strict";(globalThis.webpackChunkdocs_roll=globalThis.webpackChunkdocs_roll||[]).push([[7042],{561:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>g});var a=n(8168),t=(n(6540),n(5680));const l={},r="Distill Pipeline",p={unversionedId:"English/UserGuide/pipeline/distill_pipeline_start",id:"English/UserGuide/pipeline/distill_pipeline_start",title:"Distill Pipeline",description:"Table of Contents",source:"@site/docs/English/UserGuide/pipeline/distill_pipeline_start.md",sourceDirName:"English/UserGuide/pipeline",slug:"/English/UserGuide/pipeline/distill_pipeline_start",permalink:"/ROLL/docs/English/UserGuide/pipeline/distill_pipeline_start",draft:!1,editUrl:"https://github.com/alibaba/ROLL/tree/main/docs_roll/docs/English/UserGuide/pipeline/distill_pipeline_start.md",tags:[],version:"current",lastUpdatedAt:1761386293,formattedLastUpdatedAt:"Oct 25, 2025",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Agentic Pipeline",permalink:"/ROLL/docs/English/UserGuide/pipeline/agentic_pipeline_start"},next:{title:"DPO Pipeline",permalink:"/ROLL/docs/English/UserGuide/pipeline/dpo_pipeline_start"}},o={},g=[{value:"\u2728\ufe0fOverview",id:"\ufe0foverview",level:2},{value:"\u2728\ufe0fCore Components",id:"\ufe0fcore-components",level:2},{value:"Main Module (<code>DistillPipeline</code>)",id:"main-module-distillpipeline",level:3},{value:"Configuration File (<code>DistillConfig</code>)",id:"configuration-file-distillconfig",level:3},{value:"Configuration File Structure and Organization",id:"configuration-file-structure-and-organization",level:4},{value:"\u2728\ufe0fData Preparation",id:"\ufe0fdata-preparation",level:2},{value:"Data Format",id:"data-format",level:3},{value:"Required Columns",id:"required-columns",level:3},{value:"\u2728\ufe0fRunning the Pipeline",id:"\ufe0frunning-the-pipeline",level:2},{value:"Method 1: Using Python Launcher Script",id:"method-1-using-python-launcher-script",level:3},{value:"Method 2: Using Helper Shell Scripts",id:"method-2-using-helper-shell-scripts",level:3},{value:"\u2728\ufe0fStep-by-Step Example",id:"\ufe0fstep-by-step-example",level:2},{value:"Step 1: Configure Settings",id:"step-1-configure-settings",level:3},{value:"Step 2: Prepare Environment and Dependencies",id:"step-2-prepare-environment-and-dependencies",level:3},{value:"Step 3: Launch the Pipeline",id:"step-3-launch-the-pipeline",level:3},{value:"Step 4: Monitoring",id:"step-4-monitoring",level:3},{value:"Step 5: Outputs and Results",id:"step-5-outputs-and-results",level:3}],s={toc:g},m="wrapper";function d({components:e,...i}){return(0,t.yg)(m,(0,a.A)({},s,i,{components:e,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"distill-pipeline"},"Distill Pipeline"),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Table of Contents")),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#distill-pipeline"},"Distill Pipeline"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#%EF%B8%8Foverview"},"\u2728\ufe0fOverview")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#%EF%B8%8Fcore-components"},"\u2728\ufe0fCore Components"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#main-module-distillpipeline"},"Main Module (",(0,t.yg)("inlineCode",{parentName:"a"},"DistillPipeline"),")")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#configuration-file-distillconfig"},"Configuration File (",(0,t.yg)("inlineCode",{parentName:"a"},"DistillConfig"),")"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#configuration-file-structure-and-organization"},"Configuration File Structure and Organization")))))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#%EF%B8%8Fdata-preparation"},"\u2728\ufe0fData Preparation"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#data-format"},"Data Format"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#common-data-fields"},"Common Data Fields")))))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#%EF%B8%8Frunning-the-pipeline"},"\u2728\ufe0fRunning the Pipeline"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#method-1-using-python-launcher-script"},"Method 1: Using Python Launcher Script")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#method-2-using-helper-shell-scripts"},"Method 2: Using Helper Shell Scripts")))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#%EF%B8%8Fstep-by-step-example"},"\u2728\ufe0fStep-by-Step Example"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#step-1-configure-settings"},"Step 1: Configure Settings")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#step-2-prepare-environment-and-dependencies"},"Step 2: Prepare Environment and Dependencies")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#step-3-launch-the-pipeline"},"Step 3: Launch the Pipeline")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#step-4-monitoring"},"Step 4: Monitoring")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("a",{parentName:"li",href:"#step-5-outputs-and-results"},"Step 5: Outputs and Results"))))))),(0,t.yg)("hr",null),(0,t.yg)("h2",{id:"\ufe0foverview"},"\u2728\ufe0fOverview"),(0,t.yg)("p",null," This pipeline offers the following core advantages:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Various distillation losses"),": Support for training the model with different distillation losses and finer-grained configuration via the corresponding parameters.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Comprehensive Performance Monitoring"),": Fine-grained metric tracking system that monitors performance metrics, providing comprehensive visualization and analysis capabilities for the model training process.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Efficient Distributed Computing"),": Leverages the ",(0,t.yg)("a",{parentName:"p",href:"https://www.ray.io/"},"Ray")," framework to implement efficient distributed training on large-scale GPU clusters, significantly improving training speed and resource utilization."))),(0,t.yg)("hr",null),(0,t.yg)("h2",{id:"\ufe0fcore-components"},"\u2728\ufe0fCore Components"),(0,t.yg)("h3",{id:"main-module-distillpipeline"},"Main Module (",(0,t.yg)("inlineCode",{parentName:"h3"},"DistillPipeline"),")"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"DistillPipeline")," (located in ",(0,t.yg)("inlineCode",{parentName:"p"},"roll/pipeline/distill/distill_pipeline.py"),") is the primary coordinator for the entire distill training process. It manages the complete training workflow, including:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Initializing and managing distributed workers (Student and Teacher workers)."),(0,t.yg)("li",{parentName:"ul"},"Coordinating data collection and processing."),(0,t.yg)("li",{parentName:"ul"},"Executing model training steps."),(0,t.yg)("li",{parentName:"ul"},"Handling checkpoint saving."),(0,t.yg)("li",{parentName:"ul"},"Recording metrics and experiment tracking.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Source code"),": ",(0,t.yg)("inlineCode",{parentName:"p"},"roll/pipeline/distill/distill_pipeline.py")),(0,t.yg)("hr",null),(0,t.yg)("h3",{id:"configuration-file-distillconfig"},"Configuration File (",(0,t.yg)("inlineCode",{parentName:"h3"},"DistillConfig"),")"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"DistillConfig")," (defined in ",(0,t.yg)("inlineCode",{parentName:"p"},"roll/pipeline/distill/distill_config.py"),") is a Pydantic/dataclass-based configuration object used to specify all parameters for running the distill pipeline. This configuration system is flexibly designed, supporting configuration via YAML files and managed using the Hydra framework."),(0,t.yg)("h4",{id:"configuration-file-structure-and-organization"},"Configuration File Structure and Organization"),(0,t.yg)("p",null,"Configuration files (such as ",(0,t.yg)("inlineCode",{parentName:"p"},"examples/qwen2.5-7B-distill_megatron/distill_megatron.yaml"),") are organized by functional modules, containing the following main sections:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Experiment Basic Settings")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"exp_name"),": Experiment name, used to identify a specific training run"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"logging_dir"),": Path for saving log files"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"output_dir"),": Path for saving model checkpoints and output files"))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Training Control Parameters")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"max_steps"),": Maximum number of training steps"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"save_steps"),": Frequency for saving model checkpoints"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"logging_steps"),": Frequency for recording training metrics"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"resume_from_checkpoint"),": Whether to continue training from a checkpoint. Set it to the checkpoint path if you want to resume; otherwise, set it to ",(0,t.yg)("inlineCode",{parentName:"li"},"False"),"."))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Model Configuration")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"student_pretrain"),": Path to pre-trained weights for Student model"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"teacher_pretrain"),": Path to pre-trained weights for Teacher model"))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Distill Algorithm Parameters")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"distill_loss_weight"),": Fraction of the total loss assigned to the distillation term (SFT loss weight is 1 \u2212 this value).  "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"kd_temperature"),": Soft-max temperature applied to the student logits during knowledge distillation.  "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"teacher_temperature"),": Temperature applied to the teacher logits to control their softness.  "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"kd_objective"),": Divergence measure used to compare student and teacher distributions (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"forward_kl"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"reverse_kl"),").  "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"adaptive_kl_alpha"),": Weighting factor that blends forward and reverse KL when ",(0,t.yg)("inlineCode",{parentName:"li"},"kd_objective")," is ",(0,t.yg)("inlineCode",{parentName:"li"},"adaptive_kl"),".  "),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"skew_lambda"),": Skewing coefficient applied in ",(0,t.yg)("inlineCode",{parentName:"li"},"skewed_forward_kl")," or ",(0,t.yg)("inlineCode",{parentName:"li"},"skewed_reverse_kl")," objectives."))),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Worker Configuration"),"\nEach worker (",(0,t.yg)("inlineCode",{parentName:"p"},"student"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"teacher"),") configuration contains:"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Model Parameters")," (",(0,t.yg)("inlineCode",{parentName:"li"},"model_args"),")",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"model_type"),": Model type (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"causal_lm"),")"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"dtype"),": Computation precision (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"bf16"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"fp16"),")"),(0,t.yg)("li",{parentName:"ul"},"..."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Training Parameters")," (",(0,t.yg)("inlineCode",{parentName:"li"},"training_args"),")",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"learning_rate"),": Learning rate"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"per_device_train_batch_size"),": Training batch size per device"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"gradient_accumulation_steps"),": Gradient accumulation steps"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"weight_decay"),": Weight decay coefficient"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"max_grad_norm"),": Gradient clipping threshold"),(0,t.yg)("li",{parentName:"ul"},"..."))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Distributed Strategy")," (",(0,t.yg)("inlineCode",{parentName:"li"},"strategy_args"),")",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"strategy_name"),": Distributed strategy to use (e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"megatron_train"),", ",(0,t.yg)("inlineCode",{parentName:"li"},"deepspeed_infer"),")"),(0,t.yg)("li",{parentName:"ul"},"Strategy-specific parameters: e.g., ",(0,t.yg)("inlineCode",{parentName:"li"},"tp_size")," (tensor parallelism size), ",(0,t.yg)("inlineCode",{parentName:"li"},"pp_size")," (pipeline parallelism size)"),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"gpu_memory_utilization"),": GPU memory utilization (vLLM-specific)"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Device Mapping")," (",(0,t.yg)("inlineCode",{parentName:"li"},"device_mapping"),")",(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Specifies which GPU devices the worker should use")))))),(0,t.yg)("hr",null),(0,t.yg)("h2",{id:"\ufe0fdata-preparation"},"\u2728\ufe0fData Preparation"),(0,t.yg)("h3",{id:"data-format"},"Data Format"),(0,t.yg)("p",null,"The distill pipeline expects the training data to be stored in ",(0,t.yg)("strong",{parentName:"p"},"JSON")," files."),(0,t.yg)("h3",{id:"required-columns"},"Required Columns"),(0,t.yg)("p",null,"Each data sample must contain a question and its corresponding answer.",(0,t.yg)("br",{parentName:"p"}),"\n","In the YAML file, use the keys ",(0,t.yg)("inlineCode",{parentName:"p"},"question_key")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"answer_key")," to specify the field names that hold these two pieces of data."),(0,t.yg)("hr",null),(0,t.yg)("h2",{id:"\ufe0frunning-the-pipeline"},"\u2728\ufe0fRunning the Pipeline"),(0,t.yg)("h3",{id:"method-1-using-python-launcher-script"},"Method 1: Using Python Launcher Script"),(0,t.yg)("p",null,"The primary method is to use the ",(0,t.yg)("inlineCode",{parentName:"p"},"examples/start_distill_pipeline.py")," script. This script uses Hydra to load and manage configurations."),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Select or Create a Configuration File"),(0,t.yg)("br",{parentName:"p"}),"\n","Start with an example YAML (e.g., ",(0,t.yg)("inlineCode",{parentName:"p"},"examples/qwen2.5-7B-distill_megatron/distill_megatron.yaml"),") or create your own configuration.")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Execute the Python Launcher Script")),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"# Make sure you are in the root directory of the ROLL project\n# export PYTHONPATH=$(pwd):$PYTHONPATH\n\npython examples/start_distill_pipeline.py \\\n       --config_path examples/qwen2.5-7B-distill_megatron \\\n       --config_name distill_megatron\n")),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"--config_path")," \u2013 Directory containing your YAML configuration."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"--config_name")," \u2013 Filename (without ",(0,t.yg)("inlineCode",{parentName:"li"},".yaml"),").")))),(0,t.yg)("h3",{id:"method-2-using-helper-shell-scripts"},"Method 2: Using Helper Shell Scripts"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"examples")," directory typically contains shell scripts that wrap the Python launcher."),(0,t.yg)("p",null,"Example structure:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Example: examples/qwen2.5-7B-distill_megatron/run_distill_pipeline.sh\n\nCONFIG_NAME="distill_megatron"                         # distill_megatron.yaml\nCONFIG_PATH="examples/qwen2.5-7B-distill_megatron"\n\n# Set environment variables and other configurations\n\npython examples/start_distill_pipeline.py \\\n       --config_path $CONFIG_PATH \\\n       --config_name $CONFIG_NAME \\\n       "$@"   # Pass any additional parameters\n')),(0,t.yg)("p",null,"Run using:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"bash examples/qwen2.5-7B-distill_megatron/run_distill_pipeline.sh\n")),(0,t.yg)("hr",null),(0,t.yg)("h2",{id:"\ufe0fstep-by-step-example"},"\u2728\ufe0fStep-by-Step Example"),(0,t.yg)("h3",{id:"step-1-configure-settings"},"Step 1: Configure Settings"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"File: ",(0,t.yg)("inlineCode",{parentName:"p"},"examples/qwen2.5-7B-distill_megatron/distill_megatron.yaml"),(0,t.yg)("br",{parentName:"p"}),"\n","Key sections include ",(0,t.yg)("inlineCode",{parentName:"p"},"exp_name"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"seed"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"output_dir"),", model paths, ",(0,t.yg)("inlineCode",{parentName:"p"},"student")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"teacher")," configurations.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Pay special attention to these configuration sections:"),(0,t.yg)("ul",{parentName:"li"},(0,t.yg)("li",{parentName:"ul"},"Data configuration: ",(0,t.yg)("inlineCode",{parentName:"li"},"student.data_args.file_name")),(0,t.yg)("li",{parentName:"ul"},"Model configuration: ",(0,t.yg)("inlineCode",{parentName:"li"},"student_pretrain")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"teacher_pretrain")," paths (The distill pipeline currently only supports student and teacher models of the same type, for example, both the student and teacher models are Qwen.)"),(0,t.yg)("li",{parentName:"ul"},"Distributed strategies: ",(0,t.yg)("inlineCode",{parentName:"li"},"strategy_args")," and ",(0,t.yg)("inlineCode",{parentName:"li"},"device_mapping")," for each worker (The distillation pipeline currently only supports scenarios where the student and teacher models use the same strategy (e.g., the student uses megatron_train while the teacher uses megatron_infer) with identical parallel configurations, as we utilize CudaIPC to transfer logits from the teacher to the student.)")))),(0,t.yg)("h3",{id:"step-2-prepare-environment-and-dependencies"},"Step 2: Prepare Environment and Dependencies"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Ensure all necessary dependencies are installed:"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"pip install -r requirements.txt\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Verify that all model paths in the configuration are accessible.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"Prepare training datasets, ensuring they conform to the data format requirements described above."))),(0,t.yg)("h3",{id:"step-3-launch-the-pipeline"},"Step 3: Launch the Pipeline"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"python examples/start_distill_pipeline.py \\\n       --config_path examples/qwen2.5-7B-distill_megatron \\\n       --config_name distill_megatron\n")),(0,t.yg)("h3",{id:"step-4-monitoring"},"Step 4: Monitoring"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Console Output")," \u2013 Observe Hydra, Ray, and pipeline logs.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Log Files")," \u2013 Check the ",(0,t.yg)("inlineCode",{parentName:"p"},"logging_dir")," specified in the YAML.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"TensorBoard")),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-bash"},"tensorboard --logdir <your_log_dir>\n")))),(0,t.yg)("h3",{id:"step-5-outputs-and-results"},"Step 5: Outputs and Results"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Trained Models")," \u2013 Checkpoints are saved in the ",(0,t.yg)("inlineCode",{parentName:"li"},"output_dir"),"."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("strong",{parentName:"li"},"Evaluation Metrics")," \u2013 Recorded in TensorBoard and the console.")),(0,t.yg)("hr",null),(0,t.yg)("p",null,(0,t.yg)("em",{parentName:"p"},"Happy experimenting!")))}d.isMDXComponent=!0},5680:(e,i,n)=>{n.d(i,{xA:()=>s,yg:()=>y});var a=n(6540);function t(e,i,n){return i in e?Object.defineProperty(e,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[i]=n,e}function l(e,i){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);i&&(a=a.filter(function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable})),n.push.apply(n,a)}return n}function r(e){for(var i=1;i<arguments.length;i++){var n=null!=arguments[i]?arguments[i]:{};i%2?l(Object(n),!0).forEach(function(i){t(e,i,n[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach(function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(n,i))})}return e}function p(e,i){if(null==e)return{};var n,a,t=function(e,i){if(null==e)return{};var n,a,t={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],i.indexOf(n)>=0||(t[n]=e[n]);return t}(e,i);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],i.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var o=a.createContext({}),g=function(e){var i=a.useContext(o),n=i;return e&&(n="function"==typeof e?e(i):r(r({},i),e)),n},s=function(e){var i=g(e.components);return a.createElement(o.Provider,{value:i},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var i=e.children;return a.createElement(a.Fragment,{},i)}},u=a.forwardRef(function(e,i){var n=e.components,t=e.mdxType,l=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=g(n),u=t,y=m["".concat(o,".").concat(u)]||m[u]||d[u]||l;return n?a.createElement(y,r(r({ref:i},s),{},{components:n})):a.createElement(y,r({ref:i},s))});function y(e,i){var n=arguments,t=i&&i.mdxType;if("string"==typeof e||t){var l=n.length,r=new Array(l);r[0]=u;var p={};for(var o in i)hasOwnProperty.call(i,o)&&(p[o]=i[o]);p.originalType=e,p[m]="string"==typeof e?e:t,r[1]=p;for(var g=2;g<l;g++)r[g]=n[g];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);