"use strict";(globalThis.webpackChunkdocs_roll=globalThis.webpackChunkdocs_roll||[]).push([[6867],{5680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>y});var i=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,i)}return t}function g(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach(function(n){r(e,n,t[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),u=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):g(g({},n),e)),t},s=function(e){var n=u(e.components);return i.createElement(o.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef(function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(t),d=r,y=c["".concat(o,".").concat(d)]||c[d]||p[d]||a;return t?i.createElement(y,g(g({ref:n},s),{},{components:t})):i.createElement(y,g({ref:n},s))});function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,g=new Array(a);g[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[c]="string"==typeof e?e:r,g[1]=l;for(var u=2;u<a;u++)g[u]=t[u];return i.createElement.apply(null,g)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7651:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>g,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=t(8168),r=(t(6540),t(5680));const a={},g="ROLL Debugging Guide",l={unversionedId:"English/QuickStart/debug_guide",id:"English/QuickStart/debug_guide",title:"ROLL Debugging Guide",description:"When developing and using the ROLL framework, debugging is an essential step. This document will introduce several effective debugging methods to help you quickly locate and resolve issues.",source:"@site/docs/English/QuickStart/debug_guide.md",sourceDirName:"English/QuickStart",slug:"/English/QuickStart/debug_guide",permalink:"/ROLL/docs/English/QuickStart/debug_guide",draft:!1,editUrl:"https://github.com/alibaba/ROLL/tree/main/docs_roll/docs/English/QuickStart/debug_guide.md",tags:[],version:"current",lastUpdatedAt:1761384892,formattedLastUpdatedAt:"Oct 25, 2025",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ROLL Configuration System Detailed Explanation",permalink:"/ROLL/docs/English/QuickStart/config_system"},next:{title:"Image Provided",permalink:"/ROLL/docs/English/QuickStart/image_address"}},o={},u=[{value:"1. Using Ray Debugger",id:"1-using-ray-debugger",level:2},{value:"Enabling Ray Debugger",id:"enabling-ray-debugger",level:3},{value:"Using Ray Debugger",id:"using-ray-debugger",level:3},{value:"2. Debugging Code in Pipeline",id:"2-debugging-code-in-pipeline",level:2},{value:"3. Local Debugging of Agentic Multi-Round Interaction Process",id:"3-local-debugging-of-agentic-multi-round-interaction-process",level:2},{value:"Using Test Scripts",id:"using-test-scripts",level:3},{value:"Running Debug Scripts",id:"running-debug-scripts",level:3},{value:"4. Other Debugging Techniques",id:"4-other-debugging-techniques",level:2},{value:"Log Debugging TODO",id:"log-debugging-todo",level:3},{value:"Performance Analysis",id:"performance-analysis",level:3}],s={toc:u},c="wrapper";function p({components:e,...n}){return(0,r.yg)(c,(0,i.A)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"roll-debugging-guide"},"ROLL Debugging Guide"),(0,r.yg)("p",null,"When developing and using the ROLL framework, debugging is an essential step. This document will introduce several effective debugging methods to help you quickly locate and resolve issues."),(0,r.yg)("h2",{id:"1-using-ray-debugger"},"1. Using Ray Debugger"),(0,r.yg)("p",null,"ROLL is built on Ray, so you can use the debugging tools provided by Ray. Ray Debugger is a powerful tool that can help you debug distributed applications."),(0,r.yg)("h3",{id:"enabling-ray-debugger"},"Enabling Ray Debugger"),(0,r.yg)("p",null,"In the ",(0,r.yg)("inlineCode",{parentName:"p"},"roll/utils/ray_utils.py")," file, you can enable Ray Debugger by setting environment variables:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'# For debugging\nenv_vars["RAY_DEBUG"] = "legacy"\n')),(0,r.yg)("p",null,"You can set this environment variable before starting the training script:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export RAY_DEBUG=legacy\n")),(0,r.yg)("h3",{id:"using-ray-debugger"},"Using Ray Debugger"),(0,r.yg)("p",null,"After enabling Ray Debugger, you can use standard Python debuggers (such as pdb) for step-by-step debugging. When the program reaches a breakpoint, the debugger will pause execution, allowing you to inspect variables, call stacks, and other information."),(0,r.yg)("p",null,"For detailed usage of Ray Debugger, please refer to the official documentation:\n",(0,r.yg)("a",{parentName:"p",href:"https://docs.ray.io/en/latest/ray-observability/user-guides/debug-apps/ray-debugging.html"},"Ray Debugging Documentation")),(0,r.yg)("h2",{id:"2-debugging-code-in-pipeline"},"2. Debugging Code in Pipeline"),(0,r.yg)("p",null,"Since the Pipeline runs directly in Ray's driver, you can directly use pdb for debugging. To add breakpoints, use:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"import pdb; pdb.set_trace()\n")),(0,r.yg)("p",null,"Do not use breakpoint() in the pipeline. In Ray debug mode, breakpoint() in the driver will not enter pdb."),(0,r.yg)("h2",{id:"3-local-debugging-of-agentic-multi-round-interaction-process"},"3. Local Debugging of Agentic Multi-Round Interaction Process"),(0,r.yg)("p",null,"One feature of the ROLL framework is support for debugging the Agentic multi-round interaction process. This is very helpful for developing and optimizing Agentic applications."),(0,r.yg)("h3",{id:"using-test-scripts"},"Using Test Scripts"),(0,r.yg)("p",null,"In the ",(0,r.yg)("inlineCode",{parentName:"p"},"tests/agentic/env_manager/test_traj_env_manager.py")," file, test demo scripts for locally debugging the Agentic multi-round interaction process are provided, which you can extend with new tests."),(0,r.yg)("p",null,"The script includes the following functions:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"test_debug_traj_env_manager()")," - Debug trajectory environment manager"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"test_debug_vl_traj_env_manager()")," - Debug vision-language trajectory environment manager"),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("inlineCode",{parentName:"li"},"test_debug_step_env_manager()")," - Debug step environment manager")),(0,r.yg)("h3",{id:"running-debug-scripts"},"Running Debug Scripts"),(0,r.yg)("p",null,"To run the debug script, follow these steps:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Create and activate a Python environment:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"conda create -n python310_torch260_em python=3.10\nconda activate python310_torch260_em\n")),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"Install dependencies:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"pip3 install torch torchvision torchaudio py-cpuinfo\npip install -r requirements_em_local_debug.txt\n")),(0,r.yg)("ol",{start:3},(0,r.yg)("li",{parentName:"ol"},"Run the test script:")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"python tests/agentic/env_manager/test_traj_env_manager.py\n")),(0,r.yg)("p",null,"Through this approach, you can locally debug the Agentic multi-round interaction process, significantly improving the actual development efficiency of Agentic applications."),(0,r.yg)("h2",{id:"4-other-debugging-techniques"},"4. Other Debugging Techniques"),(0,r.yg)("h3",{id:"log-debugging-todo"},"Log Debugging ","[TODO]"),(0,r.yg)("p",null,"The ROLL framework has a built-in detailed logging system. You can obtain more debugging information by adjusting the log level:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'# Set log level in configuration file\nsystem_envs:\n  ROLL_LOG_LEVEL: "DEBUG"\n')),(0,r.yg)("h3",{id:"performance-analysis"},"Performance Analysis"),(0,r.yg)("p",null,"To get the training timeline, you can enable profiling in the YAML configuration:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'system_envs:\n  RAY_PROFILING: "1"\nprofiler_output_dir: /data/oss_bucket_0/llm/profile/${exp_name}\n')),(0,r.yg)("p",null,"Then use the ",(0,r.yg)("a",{parentName:"p",href:"https://ui.perfetto.dev/"},"Perfetto UI")," tool for analysis."),(0,r.yg)("p",null,"By properly using these debugging methods, you can more efficiently develop and optimize applications based on the ROLL framework."))}p.isMDXComponent=!0}}]);